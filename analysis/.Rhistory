axis.title = element_blank(),
legend.position="top")
gnomad_plot
CYP2C19_clin <- read_csv("../data/CYP2C19_clinical_data.csv") %>%
mutate(classification = ifelse(is.na(classification),
case_when(str_detect(clinical_functional_annotation, "no_annotation") ~ "no_annotation",
str_detect(clinical_functional_annotation, "Decreased") ~ "decreased"),
classification),
type = ifelse(is.na(type), "missense", type))
class_order <- list("nonsense-like" = "nonsense-like",
"possibly_nonsense-like" = "possibly nonsense-like",
"decreased"="decreased",
"possibly_decreased" = "possibly decreased",
"possibly_wt-like" = "possibly wt-like",
"wt-like"="wt-like")
CYP2C19_clin_counts <- CYP2C19_clin %>%
group_by(classification, in_df) %>%
filter(in_df != "dms_only") %>%
summarise(count=n()) %>%
mutate(classification = factor(classification, levels=names(class_order)))
CYP2C19_clin_counts_total <- CYP2C19_clin %>%
filter(in_df != "dms_only") %>%
group_by(classification) %>%
summarise(count=n())
custom_colorscale = c("nonsense-like" = "#BB00FF","possibly_nonsense-like" = "#A47EFF","decreased" = "#3366ff","possibly_decreased" = "#b3d9ff","possibly_wt-like" = "#ffcccc","wt-like" = "#F8766D","increased" = "orange")
gnomad_plot <- ggplot(CYP2C19_clin_counts %>% filter(in_df == "both"), aes(x=classification, y=count))+
geom_col(fill="#0072B2")+
geom_text(data=CYP2C19_clin_counts_total, aes(label=count),
vjust=-0.2)+
scale_x_discrete(labels = class_order)+
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1),
axis.title = element_blank(),
legend.position="top")
gnomad_plot
gnomad_plot <- ggplot(CYP2C19_clin_counts %>% filter(in_df == "both"), aes(x=classification, y=count))+
geom_col(fill="#0072B2")+
geom_text(data=CYP2C19_clin_counts_total %>% filter(in_df == "both"), aes(label=count),
vjust=-0.2)+
scale_x_discrete(labels = class_order)+
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1),
axis.title = element_blank(),
legend.position="top")
gnomad_plot
ggsave("../figures/clinical/gnomad_classification.png", height=7, width=5, plot=gnomad_plot)
View(CYP2C19_clin_counts_total)
gnomad_plot <- ggplot(CYP2C19_clin_counts %>% filter(in_df == "both"), aes(x=classification, y=count))+
geom_col(fill="#0072B2")+
geom_text(data=CYP2C19_clin_counts_total %>% filter(classification != "no_annotation"), aes(label=count),
vjust=-0.2)+
scale_x_discrete(labels = class_order)+
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1),
axis.title = element_blank(),
legend.position="top")
gnomad_plot
gnomad_plot <- ggplot(CYP2C19_clin_counts %>% filter(in_df == "both"), aes(x=classification, y=count))+
geom_col(fill="#0072B2")+
geom_text(data=CYP2C19_clin_counts_total %>% filter(classification != "no_annotation"), aes(label=count),
vjust=-0.2)+
scale_x_discrete(labels = class_order)+
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1),
axis.title = element_blank(),
legend.position="top")
gnomad_plot
ggsave("../figures/clinical/gnomad_classification.png", height=7, width=5, plot=gnomad_plot)
CYP2C19_stars <- CYP2C19_clin %>% drop_na(`Allele Clinical Functional Status (Required)`) %>% unique()
custom_colorscale = c("possibly_nonsense-like" = "#A47EFF","decreased" = "#3366ff","possibly_wt-like" = "#ffcccc","wt-like" = "#F8766D")
set.seed(12346)
star_plot <- ggplot(CYP2C19_stars, aes(x=`Allele Clinical Functional Status (Required)`, y=abundance_score, color=classification, group=classification))+
geom_point(size=4,
alpha=0.75,
position = position_dodge2(width=0.3))+
geom_label_repel(mapping=aes(x=`Allele Clinical Functional Status (Required)`, y=abundance_score,label=star_allele),
color="black",
position=position_dodge2(width=0.3))+
ylim(0,1.1)+
scale_color_manual(values=custom_colorscale)+
labs(x="Allele Clinical Functional Status",
y="Abundance Score")+
theme(axis.text.x = element_text(angle=45, vjust=0.5))
star_plot
ggsave("../figures/cpic_classification_dots.png", height=8,width=10, plot=star_plot)
star_plot <- ggplot(CYP2C19_stars, aes(x=`Allele Clinical Functional Status (Required)`, y=abundance_score, color=classification, group=classification))+
geom_point(size=4,
alpha=0.75,
position = position_dodge2(width=0.3))+
geom_label_repel(mapping=aes(x=`Allele Clinical Functional Status (Required)`, y=abundance_score,label=star_allele),
color="black",
position=position_dodge2(width=0.3))+
ylim(0,1.1)+
scale_color_manual(values=custom_colorscale)+
labs(y="Abundance score")+
theme(axis.text.x = element_text(angle=45, vjust=0.5),
axis.title = element_blank())
star_plot
custom_colorscale = c("possibly_nonsense-like" = "#A47EFF","decreased" = "#3366ff","possibly_wt-like" = "#ffcccc","wt-like" = "#F8766D")
set.seed(12346)
star_plot <- ggplot(CYP2C19_stars, aes(x=`Allele Clinical Functional Status (Required)`, y=abundance_score, color=classification, group=classification))+
geom_point(size=4,
alpha=0.75,
position = position_dodge2(width=0.3))+
geom_label_repel(mapping=aes(x=`Allele Clinical Functional Status (Required)`, y=abundance_score,label=star_allele),
color="black",
position=position_dodge2(width=0.3))+
ylim(0,1.1)+
scale_color_manual(values=custom_colorscale)+
labs(y="Abundance score")+
theme(axis.text.x = element_text(angle=45, vjust=0.5),
axis.title = element_blank())
star_plot <- ggplot(CYP2C19_stars, aes(x=`Allele Clinical Functional Status (Required)`, y=abundance_score, color=classification, group=classification))+
geom_point(size=4,
alpha=0.75,
position = position_dodge2(width=0.3))+
geom_label_repel(mapping=aes(x=`Allele Clinical Functional Status (Required)`, y=abundance_score,label=star_allele),
color="black",
position=position_dodge2(width=0.3))+
ylim(0,1.1)+
scale_color_manual(values=custom_colorscale)+
labs(y="Abundance score")+
theme(axis.text.x = element_text(angle=45, vjust=0.5),
axis.title.x = element_blank())
star_plot
custom_colorscale = list("possibly_nonsense-like" = "#A47EFF","decreased" = "#3366ff","possibly_wt-like" = "#ffcccc","wt-like" = "#F8766D")
custom_colorscale = list("possibly_nonsense-like" = "#A47EFF","decreased" = "#3366ff","possibly_wt-like" = "#ffcccc","wt-like" = "#F8766D")
set.seed(12346)
star_plot <- ggplot(CYP2C19_stars, aes(x=`Allele Clinical Functional Status (Required)`, y=abundance_score, color=classification, group=classification))+
geom_point(size=4,
alpha=0.75,
position = position_dodge2(width=0.3))+
geom_label_repel(mapping=aes(x=`Allele Clinical Functional Status (Required)`, y=abundance_score,label=star_allele),
color="black",
position=position_dodge2(width=0.3))+
ylim(0,1.1)+
scale_color_manual(values=custom_colorscale)+
labs(y="Abundance score")+
theme(axis.text.x = element_text(angle=45, vjust=0.5),
axis.title.x = element_blank())
star_plot
ggsave("../figures/cpic_classification_dots.png", height=8,width=10, plot=star_plot)
View(CYP2C19_stars)
View(CYP2C19_clin)
CYP2C19_clin <- read_csv("../data/CYP2C19_clinical_data.csv") %>%
mutate(classification = ifelse(is.na(classification),
case_when(str_detect(clinical_functional_annotation, "no_annotation") ~ "no_annotation",
str_detect(clinical_functional_annotation, "Decreased") ~ "decreased"),
classification),
type = ifelse(is.na(type), "missense", type))
View(CYP2C19_clin)
View(CYP2C19_clin)
View(clin_cyp2c19)
View(CYP2C19_stars)
View(CYP2C19_clin)
CYP2C19_stars <- CYP2C19_clin %>% drop_na(star_allele) %>% unique()
View(CYP2C19_stars)
View(CYP2C19_clin)
CYP2C19_data <- read_csv("../data/CYP2C19_data_detailed.csv")
CYP2C19_clin <- left_join(CYP2C19_data, clin_cyp2c19, by=c("variant" = "Protein Consequence"))
View(CYP2C19_clin)
## tidyverse 1.3.1 for ggplot, dplyr, data manipulation
if (!require(tidyverse)) install.packages('tidyverse')
library(tidyverse)
if (!require(gridExtra)) install.packages('gridExtra')
library(gridExtra)
if (!require(cowplot)) install.packages('cowplot')
library(cowplot)
if (!require(ggrepel)) install.packages('ggrepel')
library(ggrepel)
if (!require(pheatmap)) install.packages('pheatmap')
library(pheatmap)
if (!require(GGally)) install.packages('GGally')
library(GGally)
if (!require(patchwork)) install.packages('patchwork')
library(patchwork)
if (!require(zoo)) install.packages('zoo')
library(zoo)
## ggpubr 0.4.0 for correlation stats
if (!require(ggpubr)) install.packages('ggpubr')
library(ggpubr)
if (!require(ggdendro)) install.packages('ggdendro')
library(ggdendro)
if (!require(ggplotify)) install.packages('ggplotify')
library(ggplotify)
cpic_2c19_names <- read_csv("../data/cpic_allele_def.csv")
View(cpic_2c19_names)
clin_cyp2c19 <- left_join(gnomad_2c19, cpic_2c19_names, by=c("Protein Consequence" = "var"))
CYP2C19_data <- read_csv("../data/CYP2C19_data_detailed.csv")
CYP2C19_clin <- left_join(CYP2C19_data, clin_cyp2c19, by=c("variant" = "Protein Consequence"))
CYP2C19_clin_full <- full_join(CYP2C19_data, clin_cyp2c19, by=c("variant" = "Protein Consequence"))
View(CYP2C19_clin)
CYP2C19_clin_full <- CYP2C19_clin_full %>%
mutate(clinical_functional_annotation = case_when(
is.na(`Allele Clinical Functional Status (Required)`) ~ "no_annotation",
TRUE ~ `Allele Clinical Functional Status (Required)`
),
in_df = case_when(
(!is.na(`VEP Annotation`) & !is.na(abundance_score)) ~ "both",
(!is.na(`VEP Annotation`) & is.na(abundance_score)) ~ "gnomad_only",
(is.na(`VEP Annotation`) & !is.na(abundance_score)) ~ "dms_only"
))
View(CYP2C19_clin_full)
CYP2C19_clin <- read_csv("../data/CYP2C19_clinical_data.csv") %>%
mutate(classification = ifelse(is.na(classification),
case_when(str_detect(clinical_functional_annotation, "no_annotation") ~ "no_annotation",
str_detect(clinical_functional_annotation, "Decreased") ~ "decreased"),
classification),
type = ifelse(is.na(type), "missense", type))
View(CYP2C19_clin)
View(CYP2C19_clin)
View(CYP2C19_clin_full)
CYP2C19_clin <- read_csv("../data/CYP2C19_clinical_data.csv") %>%
mutate(classification = ifelse(is.na(classification),
case_when(str_detect(clinical_functional_annotation, "no_annotation") ~ "no_annotation",
str_detect(clinical_functional_annotation, "Decreased") ~ "decreased"),
classification),
type = ifelse(is.na(type), "missense", type))
problems()
View(CYP2C19_clin)
write_csv(CYP2C19_clin_full, "../data/CYP2C19_clinical_data.csv")
CYP2C19_clin <- read_csv("../data/CYP2C19_clinical_data.csv")# %>%
View(CYP2C19_clin)
CYP2C19_data <- read_csv("../data/CYP2C19_data_detailed.csv")
CYP2C19_clin <- left_join(CYP2C19_data, clin_cyp2c19, by=c("variant" = "Protein Consequence"))
CYP2C19_clin_full <- full_join(CYP2C19_data, clin_cyp2c19, by=c("variant" = "Protein Consequence"))
CYP2C19_clin <- CYP2C19_clin  %>%
mutate(clinical_functional_annotation = case_when(
is.na(`Allele Clinical Functional Status (Required)`) ~ "no_annotation",
TRUE ~ `Allele Clinical Functional Status (Required)`
))
CYP2C19_clin_full <- CYP2C19_clin_full %>%
mutate(clinical_functional_annotation = case_when(
is.na(`Allele Clinical Functional Status (Required)`) ~ "no_annotation",
TRUE ~ `Allele Clinical Functional Status (Required)`
),
in_df = case_when(
(!is.na(`VEP Annotation`) & !is.na(abundance_score)) ~ "both",
(!is.na(`VEP Annotation`) & is.na(abundance_score)) ~ "gnomad_only",
(is.na(`VEP Annotation`) & !is.na(abundance_score)) ~ "dms_only"
))
# write_csv(CYP2C19_clin_full, "../data/CYP2C19_clinical_data.csv")
CYP2C19_clin <- CYP2C19_clin %>%
mutate(classification = ifelse(is.na(classification),
case_when(str_detect(clinical_functional_annotation, "no_annotation") ~ "no_annotation",
str_detect(clinical_functional_annotation, "Decreased") ~ "decreased"),
classification),
type = ifelse(is.na(type), "missense", type))
class_order <- list("nonsense-like" = "nonsense-like",
"possibly_nonsense-like" = "possibly nonsense-like",
"decreased"="decreased",
"possibly_decreased" = "possibly decreased",
"possibly_wt-like" = "possibly wt-like",
"wt-like"="wt-like")
CYP2C19_clin_counts <- CYP2C19_clin %>%
group_by(classification, in_df) %>%
filter(in_df != "dms_only") %>%
summarise(count=n()) %>%
mutate(classification = factor(classification, levels=names(class_order)))
CYP2C19_clin_counts_total <- CYP2C19_clin %>%
filter(in_df != "dms_only") %>%
group_by(classification) %>%
summarise(count=n())
custom_colorscale = c("nonsense-like" = "#BB00FF","possibly_nonsense-like" = "#A47EFF","decreased" = "#3366ff","possibly_decreased" = "#b3d9ff","possibly_wt-like" = "#ffcccc","wt-like" = "#F8766D","increased" = "orange")
View(CYP2C19_clin)
CYP2C19_clin_counts <- CYP2C19_clin %>%
group_by(classification, in_df) %>%
filter(in_df != "dms_only") %>%
summarise(count=n()) %>%
mutate(classification = factor(classification, levels=names(class_order)))
CYP2C19_clin_full <- CYP2C19_clin_full %>%
mutate(classification = ifelse(is.na(classification),
case_when(str_detect(clinical_functional_annotation, "no_annotation") ~ "no_annotation",
str_detect(clinical_functional_annotation, "Decreased") ~ "decreased"),
classification),
type = ifelse(is.na(type), "missense", type))
class_order <- list("nonsense-like" = "nonsense-like",
"possibly_nonsense-like" = "possibly nonsense-like",
"decreased"="decreased",
"possibly_decreased" = "possibly decreased",
"possibly_wt-like" = "possibly wt-like",
"wt-like"="wt-like")
CYP2C19_clin_counts <- CYP2C19_clin %>%
group_by(classification, in_df) %>%
filter(in_df != "dms_only") %>%
summarise(count=n()) %>%
mutate(classification = factor(classification, levels=names(class_order)))
CYP2C19_clin_counts_total <- CYP2C19_clin %>%
filter(in_df != "dms_only") %>%
group_by(classification) %>%
summarise(count=n())
custom_colorscale = c("nonsense-like" = "#BB00FF","possibly_nonsense-like" = "#A47EFF","decreased" = "#3366ff","possibly_decreased" = "#b3d9ff","possibly_wt-like" = "#ffcccc","wt-like" = "#F8766D","increased" = "orange")
CYP2C19_clin_full <- CYP2C19_clin_full %>%
mutate(classification = ifelse(is.na(classification),
case_when(str_detect(clinical_functional_annotation, "no_annotation") ~ "no_annotation",
str_detect(clinical_functional_annotation, "Decreased") ~ "decreased"),
classification),
type = ifelse(is.na(type), "missense", type))
class_order <- list("nonsense-like" = "nonsense-like",
"possibly_nonsense-like" = "possibly nonsense-like",
"decreased"="decreased",
"possibly_decreased" = "possibly decreased",
"possibly_wt-like" = "possibly wt-like",
"wt-like"="wt-like")
CYP2C19_clin_counts <- CYP2C19_clin_full %>%
group_by(classification, in_df) %>%
filter(in_df != "dms_only") %>%
summarise(count=n()) %>%
mutate(classification = factor(classification, levels=names(class_order)))
CYP2C19_clin_counts_total <- CYP2C19_clin_full %>%
filter(in_df != "dms_only") %>%
group_by(classification) %>%
summarise(count=n())
custom_colorscale = c("nonsense-like" = "#BB00FF","possibly_nonsense-like" = "#A47EFF","decreased" = "#3366ff","possibly_decreased" = "#b3d9ff","possibly_wt-like" = "#ffcccc","wt-like" = "#F8766D","increased" = "orange")
gnomad_plot <- ggplot(CYP2C19_clin_counts %>% filter(in_df == "both"), aes(x=classification, y=count))+
geom_col(fill="#0072B2")+
geom_text(data=CYP2C19_clin_counts_total %>% filter(classification != "no_annotation"), aes(label=count),
vjust=-0.2)+
scale_x_discrete(labels = class_order)+
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1),
axis.title = element_blank(),
legend.position="top")
gnomad_plot
CYP2C19_stars <- CYP2C19_clin %>% drop_na(star_allele) %>% unique()
custom_colorscale = list("possibly_nonsense-like" = "#A47EFF","decreased" = "#3366ff","possibly_wt-like" = "#ffcccc","wt-like" = "#F8766D")
set.seed(12346)
star_plot <- ggplot(CYP2C19_stars, aes(x=`Allele Clinical Functional Status (Required)`, y=abundance_score, color=classification, group=classification))+
geom_point(size=4,
alpha=0.75,
position = position_dodge2(width=0.3))+
geom_label_repel(mapping=aes(x=`Allele Clinical Functional Status (Required)`, y=abundance_score,label=star_allele),
color="black",
position=position_dodge2(width=0.3))+
ylim(0,1.1)+
scale_color_manual(values=custom_colorscale)+
labs(y="Abundance score")+
theme(axis.text.x = element_text(angle=45, vjust=0.5),
axis.title.x = element_blank())
star_plot
ggsave("../figures/cpic_classification_dots.png", height=8,width=10, plot=star_plot)
theme_new = theme_set(theme_minimal(base_size=18))+
theme(axis.text.x= element_text(size=20),
axis.text.y = element_text(size=20))
# Define colorblind palette
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# Colors for homologous or divergent WT amino acids
# between CYP2C19 and 2C9
conserv_color <- list(homologous="#CC6666",
divergent="#9999CC")
colors <- list("CYP2C9" = "#D55E00",
"CYP2C19" = "#0072B2")
custom_colorscale = list("possibly_nonsense-like" = "#A47EFF","decreased" = "#3366ff","possibly_wt-like" = "#ffcccc","wt-like" = "#F8766D")
set.seed(12346)
star_plot <- ggplot(CYP2C19_stars, aes(x=`Allele Clinical Functional Status (Required)`, y=abundance_score, color=classification, group=classification))+
geom_point(size=4,
alpha=0.75,
position = position_dodge2(width=0.3))+
geom_label_repel(mapping=aes(x=`Allele Clinical Functional Status (Required)`, y=abundance_score,label=star_allele),
color="black",
position=position_dodge2(width=0.3))+
ylim(0,1.1)+
scale_color_manual(values=custom_colorscale)+
labs(y="Abundance score")+
theme(axis.text.x = element_text(angle=45, vjust=0.5),
axis.title.x = element_blank())
star_plot
ggsave("../figures/cpic_classification_dots.png", height=8,width=10, plot=star_plot)
fig5 <- star_plot+gnomad_plot
ggsave(plot=fig5, "../figures/fig5.png", height=7, width=12)
ggsave(plot=fig5, "../figures/fig5.svg", height=7, width=12)
scores <- read_csv("../data/all_samples_scores.csv") %>%
select(replicate, sort,parsed_var, weighted_average)
scores_wa <- scores %>%
group_by(parsed_var) %>%
summarise(wa_mean = mean(weighted_average),
wa_sd = sd(weighted_average)) %>%
unique() %>%
ungroup() %>%
# Add "type" column with mutation type
mutate(type = case_when(
str_detect(parsed_var, "wt") ~ "wt",
str_detect(parsed_var, "syn") ~ "syn",
str_detect(parsed_var, "Ter") ~ "nonsense",
TRUE ~ "missense"
))
# 3 letter AA code to 1 letter AA code
aa_oneLetter <- str_replace_all(scores_wa$parsed_var,
c(
"Ala"="A", "Arg" ="R", "Asn"="N", "Asp"="D",
"Cys"="C", "Glu"="E", "Gln"="Q", "Gly"="G",
"His"="H", "Ile"="I", "Leu"="L", "Lys"="K",
"Met"="M", "Phe"="F", "Pro"="P", "Ser"="S",
"Thr"="T", "Trp"="W", "Tyr"="Y", "Val"="V",
"Ter"="X"
)
)
scores_wa$variant = aa_oneLetter
scores_wa$variant = str_remove(scores_wa$variant, "\\[\\'")
scores_wa$variant = str_remove(scores_wa$variant, "\\'\\]")
scores_wa$variant = unlist(scores_wa$variant)
# Get start, end, and mutations as separate columns
scores_wa <- scores_wa %>%
mutate(start = str_extract(variant, "[A-Z]"),
aa_loc = as.numeric(str_extract(variant, "\\d+")),
end = str_extract(variant, "(?<=\\d)[A-Z]")) %>%
mutate(position = case_when(type == "syn" ~ ceiling(aa_loc/3),
TRUE ~ aa_loc))
wein_scores <- read_csv("../data/weinshilboum_2c19_scores_table.csv") %>%
select(variant = `Exact Amino acid`, abundance_score_wein = `Abundance score`)
wein_scores$variant[which(wein_scores$variant == "V331I")] <- "I331V"
wein_comparison <- left_join(wein_scores, scores_wa, by="variant")
ggplot(wein_comparison, aes(x=wa_mean, y=abundance_score_wein))+
geom_point(size=4,
alpha=0.35)+
xlim(0.35,0.9)+
ylim(0.35,0.9)+
geom_smooth(method="lm")+
stat_cor(size=6)+
labs(x="CYP2C19\nWeighted Average",
y="Zhang et al. 2020\nWeighted Average")+
theme_light(base_size=22)
ggsave("../figures/dotplots/wein_comparison.png", height=6, width=6)
scores <- read_csv("../data/all_samples_scores.csv") %>%
select(replicate, sort,parsed_var, weighted_average)
scores_wa <- scores %>%
group_by(parsed_var) %>%
summarise(wa_mean = mean(weighted_average),
wa_sd = sd(weighted_average)) %>%
unique() %>%
ungroup() %>%
# Add "type" column with mutation type
mutate(type = case_when(
str_detect(parsed_var, "wt") ~ "wt",
str_detect(parsed_var, "syn") ~ "syn",
str_detect(parsed_var, "Ter") ~ "nonsense",
TRUE ~ "missense"
))
# 3 letter AA code to 1 letter AA code
aa_oneLetter <- str_replace_all(scores_wa$parsed_var,
c(
"Ala"="A", "Arg" ="R", "Asn"="N", "Asp"="D",
"Cys"="C", "Glu"="E", "Gln"="Q", "Gly"="G",
"His"="H", "Ile"="I", "Leu"="L", "Lys"="K",
"Met"="M", "Phe"="F", "Pro"="P", "Ser"="S",
"Thr"="T", "Trp"="W", "Tyr"="Y", "Val"="V",
"Ter"="X"
)
)
scores_wa$variant = aa_oneLetter
scores_wa$variant = str_remove(scores_wa$variant, "\\[\\'")
scores_wa$variant = str_remove(scores_wa$variant, "\\'\\]")
scores_wa$variant = unlist(scores_wa$variant)
# Get start, end, and mutations as separate columns
scores_wa <- scores_wa %>%
mutate(start = str_extract(variant, "[A-Z]"),
aa_loc = as.numeric(str_extract(variant, "\\d+")),
end = str_extract(variant, "(?<=\\d)[A-Z]")) %>%
mutate(position = case_when(type == "syn" ~ ceiling(aa_loc/3),
TRUE ~ aa_loc))
wein_scores <- read_csv("../data/weinshilboum_2c19_scores_table.csv") %>%
select(variant = `Exact Amino acid`, abundance_score_wein = `Abundance score`)
wein_scores$variant[which(wein_scores$variant == "V331I")] <- "I331V"
wein_comparison <- left_join(wein_scores, scores_wa, by="variant")
scores <- read_csv("../data/all_samples_scores.csv") %>%
select(replicate, sort,parsed_var, weighted_average)
scores_wa <- scores %>%
group_by(parsed_var) %>%
summarise(wa_mean = mean(weighted_average),
wa_sd = sd(weighted_average)) %>%
unique() %>%
ungroup() %>%
# Add "type" column with mutation type
mutate(type = case_when(
str_detect(parsed_var, "wt") ~ "wt",
str_detect(parsed_var, "syn") ~ "syn",
str_detect(parsed_var, "Ter") ~ "nonsense",
TRUE ~ "missense"
))
# 3 letter AA code to 1 letter AA code
aa_oneLetter <- str_replace_all(scores_wa$parsed_var,
c(
"Ala"="A", "Arg" ="R", "Asn"="N", "Asp"="D",
"Cys"="C", "Glu"="E", "Gln"="Q", "Gly"="G",
"His"="H", "Ile"="I", "Leu"="L", "Lys"="K",
"Met"="M", "Phe"="F", "Pro"="P", "Ser"="S",
"Thr"="T", "Trp"="W", "Tyr"="Y", "Val"="V",
"Ter"="X"
)
)
scores_wa$variant = aa_oneLetter
scores_wa$variant = str_remove(scores_wa$variant, "\\[\\'")
scores_wa$variant = str_remove(scores_wa$variant, "\\'\\]")
scores_wa$variant = unlist(scores_wa$variant)
# Get start, end, and mutations as separate columns
scores_wa <- scores_wa %>%
mutate(start = str_extract(variant, "[A-Z]"),
aa_loc = as.numeric(str_extract(variant, "\\d+")),
end = str_extract(variant, "(?<=\\d)[A-Z]")) %>%
mutate(position = case_when(type == "syn" ~ ceiling(aa_loc/3),
TRUE ~ aa_loc))
wein_scores <- read_csv("../data/weinshilboum_2c19_scores_table.csv") %>%
select(variant = `Exact Amino acid`, abundance_score_wein = `Abundance score`)
wein_scores$variant[which(wein_scores$variant == "V331I")] <- "I331V"
wein_comparison <- left_join(wein_scores, scores_wa, by="variant")
ggplot(wein_comparison, aes(x=wa_mean, y=abundance_score_wein))+
geom_point(size=4,
alpha=0.35)+
xlim(0.35,0.9)+
ylim(0.35,0.9)+
geom_smooth(method="lm")+
stat_cor(size=6)+
labs(x="CYP2C19\nWeighted Average",
y="Zhang et al. 2020\nWeighted Average")+
theme_light(base_size=22)
ggsave("../figures/dotplots/wein_comparison.png", height=6, width=6)
View(FDR_corrected)
